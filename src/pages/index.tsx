import { faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';
import { gql, useMutation, useQuery } from '@apollo/client';

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import Head from 'next/head';
import employeeMutations from '../lib/mutations/employee';
import employeeQueries from '../lib/queries/employee';
import { useState } from 'react';
import { useToasts } from 'react-toast-notifications';

const Home: React.FC = () => {
  const { data, loading, error, refetch } = useQuery(
    employeeQueries.QUERY_EMPLOYEES,
    {
      variables: {
        page: 1,
        pageSize: 10,
      },
    }
  );

  const { addToast } = useToasts();

  const [createEmployee] = useMutation(employeeMutations.CREATE_EMPLOYEE);
  const [deleteEmployee] = useMutation(employeeMutations.DELETE_EMPLOYEE);
  const [updateEmployee] = useMutation(employeeMutations.UPDATE_EMPLOYEE);

  const [newEmployeeName, setNewEmployeeName] = useState('');
  const [newEmployeeEmail, setNewEmployeeEmail] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [editEmployeeId, setEditEmployeeId] = useState('');
  const [editEmployeeName, setEditEmployeeName] = useState('');
  const [editEmployeeEmail, setEditEmployeeEmail] = useState('');
  const [isUpdating, setIsUpdating] = useState(false);

  const handleCreateEmployee = async () => {
    try {
      if (!validateEmail(newEmployeeEmail)) {
        addToast('Please enter a valid email address.', {
          appearance: 'warning',
          autoDismiss: true,
        });
        return;
      }

      setIsCreating(true);
      await createEmployee({
        variables: {
          name: newEmployeeName,
          email: newEmployeeEmail,
        },
      });
      refetch();
      setNewEmployeeName('');
      setNewEmployeeEmail('');
      addToast('Employee created successfully.', {
        appearance: 'success',
        autoDismiss: true,
      });
    } catch (error) {
      console.error('Error creating employee:', error);
      addToast('Failed to create employee. Please try again later.', {
        appearance: 'error',
        autoDismiss: true,
      });
    } finally {
      setIsCreating(false);
    }
  };

  const handleDeleteEmployee = async (id: string) => {
    try {
      setIsUpdating(true); // Disable editing while deleting
      await deleteEmployee({
        variables: {
          deleteEmployeeId: id,
        },
      });
      refetch();
      addToast('Employee deleted successfully.', {
        appearance: 'success',
        autoDismiss: true,
      });
    } catch (error) {
      console.error('Error deleting employee:', error);
      addToast('Failed to delete employee. Please try again later.', {
        appearance: 'error',
        autoDismiss: true,
      });
    } finally {
      setIsUpdating(false);
    }
  };

  const handleUpdateEmployee = async () => {
    try {
      if (!validateEmail(editEmployeeEmail)) {
        addToast('Please enter a valid email address.', {
          appearance: 'warning',
          autoDismiss: true,
        });
        return;
      }

      setIsUpdating(true);
      await updateEmployee({
        variables: {
          updateEmployeeId: editEmployeeId,
          name: editEmployeeName,
          email: editEmployeeEmail,
        },
      });
      refetch();
      // Clear edit state after update
      setEditEmployeeId('');
      setEditEmployeeName('');
      setEditEmployeeEmail('');
      addToast('Employee updated successfully.', {
        appearance: 'success',
        autoDismiss: true,
      });
    } catch (error) {
      console.error('Error updating employee:', error);
      addToast('Failed to update employee. Please try again later.', {
        appearance: 'error',
        autoDismiss: true,
      });
    } finally {
      setIsUpdating(false);
    }
  };

  const handleCancelUpdate = () => {
    // Reset edit state to discard changes
    setEditEmployeeId('');
    setEditEmployeeName('');
    setEditEmployeeEmail('');
  };

  const validateEmail = (email: string) => {
    // Basic email format validation
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  };

  if (loading) return <p>Loading...</p>;
  if (error) {
    console.error('GraphQL error:', error);
    return <p>Error fetching data.</p>;
  }

  // Sort employees by id on the frontend
  const sortedEmployees = [...(data?.employees || [])].sort((a, b) =>
    a.id.localeCompare(b.id)
  );

  return (
    <>
      <Head>
        <title>Next.js and GraphQL Setup</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className='p-4'>
        <h1 className='text-2xl font-bold mb-4'>Employees</h1>
        <ul className='space-y-4 mx-auto w-2/3'>
          {sortedEmployees.map(
            (employee: { id: string; name: string; email: string }) => (
              <li key={employee.id} className='border rounded-lg p-4 bg-gray-100 h-48'>
                {/* Edit form or modal */}
                {editEmployeeId === employee.id ? (
                  <div className='mb-2 h-2/3'>
                    <input
                      type='text'
                      placeholder='Name'
                      value={editEmployeeName}
                      onChange={(e) => setEditEmployeeName(e.target.value)}
                      className='border rounded-md px-3 py-2 w-1/2'
                      disabled={isUpdating} // Disable editing while updating
                    />
                    <input
                      type='email'
                      placeholder='Email'
                      value={editEmployeeEmail}
                      onChange={(e) => setEditEmployeeEmail(e.target.value)}
                      className='border rounded-md px-3 py-2 w-1/2'
                      disabled={isUpdating} // Disable editing while updating
                    />
                    <div className='flex mt-4'>
                      <button
                        onClick={handleUpdateEmployee}
                        className={`bg-green-500 text-white px-4 py-2 rounded-md mr-2 ${
                          isUpdating ? 'opacity-50 cursor-not-allowed' : ''
                        }`}
                        disabled={isUpdating}>
                        {isUpdating ? 'Updating...' : 'Save'}
                      </button>
                      <button
                        onClick={handleCancelUpdate}
                        className='bg-gray-500 text-white px-4 py-2 rounded-md'>
                        Cancel
                      </button>
                    </div>
                  </div>
                ) : (
                  <div className='text-left text-xl h-2/3'>
                    <strong>Id:</strong> {employee.id} <br />
                    <strong>Name:</strong> {employee.name} <br />
                    <strong>Email:</strong> {employee.email}
                  </div>
                )}
                {/* Actions */}
                <div className='mt-2 flex justify-center h-1/4'>
                  <button
                    className={`bg-blue-500 text-white px-2 py-2 rounded-md mr-2 ${
                      editEmployeeId === employee.id || isUpdating
                        ? 'opacity-50 cursor-not-allowed'
                        : ''
                    }`}
                    onClick={() => {
                      setEditEmployeeId(employee.id);
                      setEditEmployeeName(employee.name);
                      setEditEmployeeEmail(employee.email);
                    }}
                    disabled={editEmployeeId === employee.id || isUpdating}>
                    <FontAwesomeIcon icon={faEdit} className="h-6 w-6" />
                  </button>
                  <button
                    className={`bg-red-500 text-white px-2 py-2 rounded-md ${
                      editEmployeeId === employee.id || isUpdating
                        ? 'opacity-50 cursor-not-allowed'
                        : ''
                    }`}
                    onClick={() => handleDeleteEmployee(employee.id)}
                    disabled={editEmployeeId === employee.id || isUpdating}>
                    <FontAwesomeIcon icon={faTrashAlt} className="h-6 w-6" />
                  </button>
                </div>
              </li>
            )
          )}
        </ul>
        <div className='mt-8'>
          <h2 className='text-xl font-bold mb-4'>Add New Employee</h2>
          <div className='flex space-x-2 h-10 justify-center'>
            <input
              type='text'
              placeholder='Name'
              value={newEmployeeName}
              onChange={(e) => setNewEmployeeName(e.target.value)}
              className='border rounded-md px-3 py-2 w-2/5'
              disabled={isCreating} // Disable input while creating
            />
            <input
              type='email'
              placeholder='Email'
              value={newEmployeeEmail}
              onChange={(e) => setNewEmployeeEmail(e.target.value)}
              className='border rounded-md px-3 py-2 w-2/5'
              disabled={isCreating} // Disable input while creating
            />
            <button
              onClick={handleCreateEmployee}
              className={`bg-green-500 text-white px-4 py-2 rounded-md ${
                isCreating ? 'opacity-50 cursor-not-allowed' : ''
              }`}
              disabled={isCreating}>
              {isCreating ? 'Adding...' : 'Add'}
            </button>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
