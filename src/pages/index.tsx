import { gql, useMutation, useQuery } from '@apollo/client';

import Head from 'next/head';
import { useState } from 'react';

// GraphQL Query to fetch employees
const QUERY = gql`
  query Employees($page: Int, $pageSize: Int) {
    employees(page: $page, pageSize: $pageSize) {
      id
      name
      email
    }
  }
`;

// GraphQL Mutation to create an employee
const CREATE_EMPLOYEE = gql`
  mutation CreateEmployee($name: String!, $email: String!) {
    createEmployee(name: $name, email: $email) {
      code
      success
      message
      employee {
        id
        name
        email
      }
    }
  }
`;

// GraphQL Mutation to delete an employee
const DELETE_EMPLOYEE = gql`
  mutation DeleteEmployee($deleteEmployeeId: ID!) {
    deleteEmployee(id: $deleteEmployeeId) {
      code
      success
      message
      employee {
        id
        name
        email
      }
    }
  }
`;

// GraphQL Mutation to update an employee
const UPDATE_EMPLOYEE = gql`
  mutation UpdateEmployee(
    $updateEmployeeId: ID!
    $name: String
    $email: String
  ) {
    updateEmployee(id: $updateEmployeeId, name: $name, email: $email) {
      code
      success
      message
      employee {
        id
        name
        email
      }
    }
  }
`;

const Home: React.FC = () => {
  const { data, loading, error, refetch } = useQuery(QUERY, {
    variables: {
      page: 1,
      pageSize: 10,
    },
  });

  const [createEmployee] = useMutation(CREATE_EMPLOYEE);
  const [deleteEmployee] = useMutation(DELETE_EMPLOYEE);
  const [updateEmployee] = useMutation(UPDATE_EMPLOYEE);

  const [newEmployeeName, setNewEmployeeName] = useState('');
  const [newEmployeeEmail, setNewEmployeeEmail] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [editEmployeeId, setEditEmployeeId] = useState('');
  const [editEmployeeName, setEditEmployeeName] = useState('');
  const [editEmployeeEmail, setEditEmployeeEmail] = useState('');

  const handleCreateEmployee = async () => {
    try {
      setIsCreating(true);
      await createEmployee({
        variables: {
          name: newEmployeeName,
          email: newEmployeeEmail,
        },
      });
      refetch();
      setNewEmployeeName('');
      setNewEmployeeEmail('');
    } catch (error) {
      console.error('Error creating employee:', error);
    } finally {
      setIsCreating(false);
    }
  };

  const handleDeleteEmployee = async (id: string) => {
    try {
      await deleteEmployee({
        variables: {
          deleteEmployeeId: id,
        },
      });
      refetch();
    } catch (error) {
      console.error('Error deleting employee:', error);
    }
  };

  const handleUpdateEmployee = async () => {
    try {
      await updateEmployee({
        variables: {
          updateEmployeeId: editEmployeeId,
          name: editEmployeeName,
          email: editEmployeeEmail,
        },
      });
      refetch();
      // Clear edit state after update
      setEditEmployeeId('');
      setEditEmployeeName('');
      setEditEmployeeEmail('');
    } catch (error) {
      console.error('Error updating employee:', error);
    }
  };

  if (loading) return <p>Loading...</p>;
  if (error) {
    console.error('GraphQL error:', error);
    return <p>Error fetching data.</p>;
  }

  return (
    <>
      <Head>
        <title>Next.js and GraphQL Setup</title>
        <meta
          name='description'
          content='Generated by create next app'
        />
        <meta
          name='viewport'
          content='width=device-width, initial-scale=1'
        />
        <link
          rel='icon'
          href='/favicon.ico'
        />
      </Head>
      <main className='p-4'>
        <h1 className='text-2xl font-bold mb-4'>Employees</h1>
        <ul className='space-y-40 mx-auto w-1/3'>
          {(data?.employees || []).map(
            (employee: { id: string; name: string; email: string }) => (
              <li
                key={employee.id}
                className='border rounded-lg p-4 bg-gray-100'>
                {/* Edit form or modal */}
                {editEmployeeId === employee.id ? (
                  <div className='mb-2'>
                    <input
                      type='text'
                      placeholder='Name'
                      value={editEmployeeName}
                      onChange={(e) => setEditEmployeeName(e.target.value)}
                      className='border rounded-md px-3 py-2 w-1/2'
                    />
                    <input
                      type='email'
                      placeholder='Email'
                      value={editEmployeeEmail}
                      onChange={(e) => setEditEmployeeEmail(e.target.value)}
                      className='border rounded-md px-3 py-2 w-1/2'
                    />
                    <button
                      onClick={handleUpdateEmployee}
                      className='bg-green-500 text-white px-4 py-2 rounded-md ml-2 mt-6'>
                      Update
                    </button>
                  </div>
                ) : (
                  <div className='text-left text-2xl mb-6'>
                    <strong>Id:</strong> {employee.id} <br />
                    <strong>Name:</strong> {employee.name} <br />
                    <strong>Email:</strong> {employee.email}
                  </div>
                )}
                {/* Actions */}
                <div className='mt-2 flex justify-center'>
                  <button
                    className='bg-blue-500 text-white px-4 py-2 rounded-md mr-2'
                    onClick={() => {
                      setEditEmployeeId(employee.id);
                      setEditEmployeeName(employee.name);
                      setEditEmployeeEmail(employee.email);
                    }}>
                    Edit
                  </button>
                  <button
                    className='bg-red-500 text-white px-4 py-2 rounded-md'
                    onClick={() => handleDeleteEmployee(employee.id)}>
                    Delete
                  </button>
                </div>
              </li>
            )
          )}
        </ul>
        <div className='mt-8'>
          <h2 className='text-xl font-bold mb-4'>Add New Employee</h2>
          <div className='flex space-x-2 h-10'>
            <input
              type='text'
              placeholder='Name'
              value={newEmployeeName}
              onChange={(e) => setNewEmployeeName(e.target.value)}
              className='border rounded-md px-3 py-2 w-2/5'
            />
            <input
              type='email'
              placeholder='Email'
              value={newEmployeeEmail}
              onChange={(e) => setNewEmployeeEmail(e.target.value)}
              className='border rounded-md px-3 py-2 w-2/5'
            />
            <button
              onClick={handleCreateEmployee}
              className={`bg-green-500 text-white px-4 py-2 rounded-md ${
                isCreating ? 'opacity-50 cursor-not-allowed' : ''
              }`}
              disabled={isCreating}>
              {isCreating ? 'Adding...' : 'Add'}
            </button>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
